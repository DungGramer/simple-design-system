import './DropdownMenu.module';
import PropTypes from 'prop-types';
import Dropdown from '@atoms/dropdown/Dropdown';
import Menu from '@atoms/menu/Menu';
import { useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import Tabs from '@molecules/tabs/Tabs';
import Highlight from 'react-highlight';
// import '/node_modules/highlight.js/styles/atelier-sulphurpool-light.css';
// import '/node_modules/highlight.js/styles/github.css';
import '/node_modules/highlight.js/styles/atom-one-light.css';
import CodeHighlight from '@atoms/code-highlight/CodeHighlight';
import CodeBox from '@molecules/code-box/CodeBox';
import Button from '@atoms/button/Button';
import useToggle from '@components/hooks/useToggle';
// import '/node_modules/highlight.js/styles/stackoverflow-light.css';
import { Cell, Column, HeaderCell, Table } from 'rsuite-table';
import 'rsuite-table/dist/css/rsuite-table.css';

const menu = (
  // Create
  <>
    {new Array(30).fill(0).map((_, i) => (
      <Menu key={i} content={`Menu item ${i}`} />
    ))}
  </>
);

function DropdownMenu(props) {
  const { t } = useTranslation();
  const btnRef = useRef();
  const [open, toggleOpen] = useToggle(false);

  const Example = () => {
    const { t, i18n } = useTranslation();
    const defaultDropdown = `
    <Dropdown
        parentRef={btnRef}
        overlay={menu}
        onClick={toggleOpen}
        isOpen={open}
      />
  `;
    return (
      <div>
        <section>
          <h3>{t('Default')}</h3>
          <CodeBox
            component={
              <>
                <Button ref={btnRef} onClick={toggleOpen} title="Click me" />
                <Dropdown
                  parentRef={btnRef}
                  overlay={menu}
                  onClick={toggleOpen}
                  isOpen={open}
                />
              </>
            }
            data={defaultDropdown}
          />
        </section>
      </div>
    );
  };
  const API = () => {
    const data = [
      {
        property: <code>parentRef</code>,
        description: t('The reference of the parent element'),
        type: 'React.RefObject',
        default: 'null',
      },
      {
        property: <code>overlay</code>,
        description: t('The content of the dropdown'),
        type: 'React.ReactNode',
        default: 'null',
      },
      {
        property: <code>onClick</code>,
        description: t('The callback function when the dropdown is clicked'),
        type: 'Function',
        default: 'null',
      },
      {
        property: <code>isOpen</code>,
        description: t('Whether the dropdown is open'),
        type: 'Boolean',
        default: 'false',
      },
    ];
    return (
      <div>
        <h3>{t('API')}</h3>
        <p>
          {t(
            `Different button styles can be generated by setting Button properties.`,
          )}
        </p>
        <Table virtualized data={data} autoHeight>
          <Column width={200}>
            <HeaderCell>{t('Property')}</HeaderCell>
            <Cell dataKey="property" />
          </Column>
          <Column width={200} flexGrow={1}>
            <HeaderCell>{t('Description')}</HeaderCell>
            <Cell dataKey="description" />
          </Column>
          <Column width={200}>
            <HeaderCell>{t('Type')}</HeaderCell>
            <Cell dataKey="type" />
          </Column>
          <Column width={100}>
            <HeaderCell>{t('Default')}</HeaderCell>
            <Cell dataKey="default" />
          </Column>
        </Table>
      </div>
    );
  };
  const Usage = () => <h1>das</h1>;

  return (
    <div>
      <h1>{t('dropdown.title')}</h1>
      <p>{t('dropdown.description')}</p>

      <Tabs title={[t('Examples'), t('API'), t('Usage')]}>
        <Example />
        <API />
        <Usage />
      </Tabs>
    </div>
  );
}

DropdownMenu.propTypes = {};

export default DropdownMenu;
